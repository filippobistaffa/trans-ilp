#!/bin/bash
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir),
# the same directory where target-evaluator is executed. Hence, you may
# need to copy extra files needed by the executable to this directory.
#
#
# PARAMETERS:
# $1 is the candidate number
# $2 is the instance id
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print nothing.
# Exit with 0 if no error, with 1 in case of error
###############################################################################
tmpfile=$(mktemp)

#!/bin/bash

EXECUTABLE="python3 /home/filippo.bistaffa/mcts-rs/main.py"
DATA_DIR="/home/filippo.bistaffa/mcts-rs/data"
IRACE_LOG="/home/filippo.bistaffa/mcts-rs/irace/cluster/log"

# Fixed parameters
DISTANCE="$DATA_DIR/gmaps_distance.csv"
TIME="$DATA_DIR/gmaps_time.csv"
ITERATIONS=1000

CANDIDATE=$1
INSTANCEID=$2
SEED=$3
INSTANCE=$4
shift 4 || error "Not enough parameters to $0"
CAND_PARAMS=$*

STDOUT=${IRACE_LOG}/c${CANDIDATE}-${INSTANCEID}.stdout
STDERR=${IRACE_LOG}/c${CANDIDATE}-${INSTANCEID}.stderr

error() {
    echo "`TZ=UTC date`: error: $@"
    cat $tmpfile
    rm -f $tmpfile
    exit 1
}

# modify with the SLURM submission template
sbatch 1> $tmpfile <<EOF
#!/bin/bash
#SBATCH --job-name=irace-$PPID-$CANDIDATE-${INSTANCEID}
#SBATCH --time=5:00
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
module load python-3.8.6-gcc-4.8.5-xl42tkm
module load py-numpy-1.19.4-gcc-10.2.0-pmcqalx
echo $EXECUTABLE $INSTANCE --distance $DISTANCE --time $TIME --seed $SEED --iterations $ITERATIONS ${CAND_PARAMS} --irace --partial 1> $STDOUT
srun $EXECUTABLE $INSTANCE --distance $DISTANCE --time $TIME --seed $SEED --iterations $ITERATIONS ${CAND_PARAMS} --irace --partial 1>> $STDOUT 2>> $STDERR
RET=\$?
exit \$RET
EOF

rc=$?
if [[ $rc == 0 ]]; then
    JOBID=$(grep -o -e "Submitted batch job [^ ]\+" $tmpfile | cut -f4 -d ' ')
    if ! [[ "$JOBID" =~ ^[_-.@0-9A-Za-z]+$ ]] ; then
        error "$0: cannot parse jobID from the output of sbatch!"
    fi
    echo "$JOBID"
    rm -f $tmpfile
    exit $rc
else
    error "$0: sbatch failed!"
fi
